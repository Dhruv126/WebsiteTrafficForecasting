import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import joblib
import os

st.set_page_config(page_title="Website Traffic Forecasting Dashboard", layout="wide")

def load_data():
    """
    Load the processed forecast data from CSV.
    The CSV is expected to have the following columns:
    - Date: The date of the data point.
    - Actual: The actual page loads.
    - Forecast: The forecasted page loads from the hybrid model.
    """
    data_path = "D:\FirstQuadrent\WebsiteTrafficForecasting\data\processed\/forecast_data.csv"

    if os.path.exists(data_path):
        print(f"File found at: {data_path}")
    else:
        print(f"File NOT found at: {data_path}")


    try:
        data = pd.read_csv(data_path, parse_dates=['Date'])
        return data
    except Exception as e:
        st.error(f"Error loading forecast data: {e}")
        return None

def main():
    st.title("Website Traffic Forecasting Dashboard")
    st.markdown(
        """
        This dashboard displays historical website traffic and forecasts generated by our hybrid model.
        Use the sidebar to adjust the date range and view detailed plots.
        """
    )

    data = load_data()
    if data is None:
        return

    st.subheader("Forecast Data Preview")
    st.dataframe(data.head())

    st.sidebar.header("Filter Data")
    min_date = data['Date'].min()
    max_date = data['Date'].max()
    date_range = st.sidebar.date_input("Select date range", [min_date, max_date])
    if len(date_range) == 2:
        start_date, end_date = date_range
        mask = (data['Date'] >= pd.to_datetime(start_date)) & (data['Date'] <= pd.to_datetime(end_date))
        filtered_data = data.loc[mask]
    else:
        filtered_data = data

    st.subheader("Actual vs Forecasted Website Traffic")
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(filtered_data['Date'], filtered_data['Actual'], label="Actual Page Loads", marker="o")
    ax.plot(filtered_data['Date'], filtered_data['Forecast'], label="Hybrid Forecast", linestyle="--", marker="x")
    ax.set_xlabel("Date")
    ax.set_ylabel("Page Loads")
    ax.set_title("Website Traffic: Actual vs Forecast")
    ax.legend()
    st.pyplot(fig)

    st.subheader("Summary Statistics")
    st.write(filtered_data.describe())

if __name__ == '__main__':
    main()